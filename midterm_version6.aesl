<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="RIGHT"/>
<constant value="2" name="LEFT"/>
<constant value="3" name="TAPE_LEFT"/>
<constant value="4" name="TAPE_RIGHT"/>
<constant value="5" name="STRAIGHT"/>
<constant value="205" name="TARGET"/>
<constant value="600" name="THRESHOLD"/>
<constant value="1000" name="TIMER"/>
<constant value="450" name="TURN_TARGET"/>
<constant value="200" name="EDGE"/>
<constant value="300" name="TAPE_TARGET"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var min                             # min over all sensor readings
var max                             # max over all sensor readings
var mean                            # average over all sensor readings
var state = STOPPED                 # state of the robot

motor.left.target = 0               # reset motors
motor.right.target = 0
timer.period[0] = TIMER

onevent button.forward              # if forward button is pressed  
  state = TAPE_RIGHT                   # transition to FORWARD state
  motor.left.target = TARGET        # start moving forward
  motor.right.target = TARGET
	
onevent button.backward             # if backward button is pressed
  state = STOPPED                   # transition to STOPPED state
  motor.left.target = 0             # stop motors
  motor.right.target = 0
	
onevent prox                        # check proximity sensors
  if state != STOPPED then          # only if we are not STOPPED
    # compute min, max, and mean over the current sensor readings 
    call math.stat( prox.horizontal[0:4], min, max, mean )
    
    if state == TAPE_LEFT and  prox.ground.delta[0] >= EDGE then
      state = TAPE_RIGHT                          #  transition to RIGHT state
      motor.left.target = TAPE_TARGET          #  move right
      motor.right.target = 0
      call leds.circle(32,0,0,0,0,0,0,0)
    end

    
    # if moving right and sensing black line
    if (state == TAPE_RIGHT) and prox.ground.delta[0] &lt; EDGE then
      state = TAPE_LEFT                           #  transition to LEFT state
      motor.left.target = 0                  #  move left
      motor.right.target = TAPE_TARGET
       call leds.circle(32,32,0,0,0,0,0,0)
    end
    if (state == LEFT or state == RIGHT or state == STRAIGHT) and prox.ground.delta[0] &lt; EDGE then
      state = TAPE_LEFT                           #  transition to LEFT state
      motor.left.target = -TURN_TARGET                  #  move left
      motor.right.target = TURN_TARGET
       call leds.circle(32,32,0,0,0,0,0,0)
    end

    # if we are in state other than LEFT and sense a blockage    
    if (state == RIGHT or state == TAPE_RIGHT or state == TAPE_LEFT) and max > THRESHOLD then     
      state = LEFT               # transition to LEFT state
      motor.left.target = -TURN_TARGET         # stop motors
      motor.right.target = TURN_TARGET
      call leds.circle(32,32,32,0,0,0,0,0)
    end

    # if we are in state BLOCKED and blockage is removed    
    if (state == LEFT) and max &lt;= THRESHOLD then
      state = STRAIGHT                # transition to STRAIGHT state
      motor.left.target = TARGET     # start moving forward
      motor.right.target = TARGET
      timer.period[1] = TIMER
      call leds.circle(32,32,32,32,0,0,0,0)
    end
  end
  
  onevent timer1
  		state = RIGHT
  		motor.left.target = TURN_TARGET         # stop motors
     motor.right.target = -TURN_TARGET
     timer.period[1] = 0
     call leds.circle(32,32,32,32,32,0,0,0)
  </node>


</network>
